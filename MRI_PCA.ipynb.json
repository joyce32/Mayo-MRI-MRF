{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "from ipywidgets import interact, interactive, fixed, interact_manual\n",
    "import ipywidgets as widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# -------------\n",
    "# Get MRI data (256,256,256,7)\n",
    "# [\"PDw_au\",\"syFLAIR\",\"syFSE\",\"syGRE\",\"syMP2RAGE\",\"T1\",\"T2\"]\n",
    "# -------------\n",
    "MRI = np.load(\"../AHIResearch/Rotated_MRI_cube.npy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 256, 256, 7)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MRI.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(458752,)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# single slice calculation \n",
    "slice_0 = MRI[:,:,0,:]\n",
    "n0,n1,n2 = slice_0.shape\n",
    "slice_0 = np.reshape(slice_0, (n0*n1*n2))\n",
    "slice_0.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "256"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 256 slices each of size 458752, appended into a list\n",
    "X = []\n",
    "for z in range(256):\n",
    "    slice_z = MRI[:, :, z, :]\n",
    "    n0,n1,n2 = slice_z.shape\n",
    "    slice_z = np.reshape(slice_z, (n0*n1*n2))\n",
    "    X.append(slice_z)\n",
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 458752)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert list to array shape (256, 458752)\n",
    "X = np.asarray(X)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2 Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = PCA(n_components=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "pX = pca.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape:  (256, 458752)\n",
      "Transformed shape:  (256, 2)\n"
     ]
    }
   ],
   "source": [
    "print(\"Original shape: \", X.shape)\n",
    "print(\"Transformed shape: \", pX.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Component 1</th>\n",
       "      <th>Component 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>154758.006612</td>\n",
       "      <td>24734.199555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>143228.384813</td>\n",
       "      <td>21900.855095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>139746.083374</td>\n",
       "      <td>27706.187827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>137775.001554</td>\n",
       "      <td>40777.454476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>131886.309377</td>\n",
       "      <td>50019.504784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>123492.340180</td>\n",
       "      <td>58277.300971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>113975.221718</td>\n",
       "      <td>64574.701606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>106195.225997</td>\n",
       "      <td>69141.633948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>101582.325239</td>\n",
       "      <td>72469.335518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>100438.910407</td>\n",
       "      <td>76733.177770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>97921.457733</td>\n",
       "      <td>75990.855843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>96049.041604</td>\n",
       "      <td>75684.859456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>93307.879486</td>\n",
       "      <td>78328.181555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>88763.036456</td>\n",
       "      <td>81336.150777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>84656.026740</td>\n",
       "      <td>83458.292714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>81087.677478</td>\n",
       "      <td>84161.603396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>76703.726939</td>\n",
       "      <td>84318.067081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>74723.946685</td>\n",
       "      <td>86997.136043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>69620.609169</td>\n",
       "      <td>88663.895244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>65478.756053</td>\n",
       "      <td>87920.935749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>61533.715823</td>\n",
       "      <td>88259.642789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>56827.094366</td>\n",
       "      <td>90753.216864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>53304.158367</td>\n",
       "      <td>92783.054481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>50731.813524</td>\n",
       "      <td>92229.236942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>47487.679646</td>\n",
       "      <td>94764.537805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>45585.620015</td>\n",
       "      <td>95734.718529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>43106.966476</td>\n",
       "      <td>96685.371441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>39438.774221</td>\n",
       "      <td>100525.417634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>34901.544950</td>\n",
       "      <td>99926.519309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30699.766489</td>\n",
       "      <td>99224.639123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>226</th>\n",
       "      <td>195521.720935</td>\n",
       "      <td>-78491.465750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>193295.323961</td>\n",
       "      <td>-78519.163556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>194577.589389</td>\n",
       "      <td>-78689.971877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>193859.444103</td>\n",
       "      <td>-83296.888296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>195220.468746</td>\n",
       "      <td>-83959.484097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>194230.179209</td>\n",
       "      <td>-84249.600633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>193849.470257</td>\n",
       "      <td>-79518.013090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>194824.938875</td>\n",
       "      <td>-83489.128372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>194546.076365</td>\n",
       "      <td>-86847.696057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>194775.669350</td>\n",
       "      <td>-87719.606265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>192586.339367</td>\n",
       "      <td>-82274.488759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>193136.778865</td>\n",
       "      <td>-80866.807212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>194036.909889</td>\n",
       "      <td>-85062.094599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>194307.107943</td>\n",
       "      <td>-83554.192701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>194618.539796</td>\n",
       "      <td>-81362.149153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>193803.709082</td>\n",
       "      <td>-82116.609553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>194656.945752</td>\n",
       "      <td>-79297.403812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>193606.157760</td>\n",
       "      <td>-77741.635039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>192418.745336</td>\n",
       "      <td>-74698.878639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>193065.354746</td>\n",
       "      <td>-76439.263851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>191671.575193</td>\n",
       "      <td>-76062.493445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>194201.759647</td>\n",
       "      <td>-74912.932819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>194595.957943</td>\n",
       "      <td>-74622.345910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>199911.360088</td>\n",
       "      <td>-78584.088158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>202588.568390</td>\n",
       "      <td>-78078.065104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>207873.127364</td>\n",
       "      <td>-81985.037846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>209361.291525</td>\n",
       "      <td>-85882.427111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>212489.025189</td>\n",
       "      <td>-87783.114832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>213215.379048</td>\n",
       "      <td>-81367.909741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>139812.093550</td>\n",
       "      <td>67821.453361</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>256 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Component 1    Component 2\n",
       "0    154758.006612   24734.199555\n",
       "1    143228.384813   21900.855095\n",
       "2    139746.083374   27706.187827\n",
       "3    137775.001554   40777.454476\n",
       "4    131886.309377   50019.504784\n",
       "5    123492.340180   58277.300971\n",
       "6    113975.221718   64574.701606\n",
       "7    106195.225997   69141.633948\n",
       "8    101582.325239   72469.335518\n",
       "9    100438.910407   76733.177770\n",
       "10    97921.457733   75990.855843\n",
       "11    96049.041604   75684.859456\n",
       "12    93307.879486   78328.181555\n",
       "13    88763.036456   81336.150777\n",
       "14    84656.026740   83458.292714\n",
       "15    81087.677478   84161.603396\n",
       "16    76703.726939   84318.067081\n",
       "17    74723.946685   86997.136043\n",
       "18    69620.609169   88663.895244\n",
       "19    65478.756053   87920.935749\n",
       "20    61533.715823   88259.642789\n",
       "21    56827.094366   90753.216864\n",
       "22    53304.158367   92783.054481\n",
       "23    50731.813524   92229.236942\n",
       "24    47487.679646   94764.537805\n",
       "25    45585.620015   95734.718529\n",
       "26    43106.966476   96685.371441\n",
       "27    39438.774221  100525.417634\n",
       "28    34901.544950   99926.519309\n",
       "29    30699.766489   99224.639123\n",
       "..             ...            ...\n",
       "226  195521.720935  -78491.465750\n",
       "227  193295.323961  -78519.163556\n",
       "228  194577.589389  -78689.971877\n",
       "229  193859.444103  -83296.888296\n",
       "230  195220.468746  -83959.484097\n",
       "231  194230.179209  -84249.600633\n",
       "232  193849.470257  -79518.013090\n",
       "233  194824.938875  -83489.128372\n",
       "234  194546.076365  -86847.696057\n",
       "235  194775.669350  -87719.606265\n",
       "236  192586.339367  -82274.488759\n",
       "237  193136.778865  -80866.807212\n",
       "238  194036.909889  -85062.094599\n",
       "239  194307.107943  -83554.192701\n",
       "240  194618.539796  -81362.149153\n",
       "241  193803.709082  -82116.609553\n",
       "242  194656.945752  -79297.403812\n",
       "243  193606.157760  -77741.635039\n",
       "244  192418.745336  -74698.878639\n",
       "245  193065.354746  -76439.263851\n",
       "246  191671.575193  -76062.493445\n",
       "247  194201.759647  -74912.932819\n",
       "248  194595.957943  -74622.345910\n",
       "249  199911.360088  -78584.088158\n",
       "250  202588.568390  -78078.065104\n",
       "251  207873.127364  -81985.037846\n",
       "252  209361.291525  -85882.427111\n",
       "253  212489.025189  -87783.114832\n",
       "254  213215.379048  -81367.909741\n",
       "255  139812.093550   67821.453361\n",
       "\n",
       "[256 rows x 2 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca = pd.DataFrame(pX, columns = ['Component 1', 'Component 2'])\n",
    "df_pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Component 2')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,4))\n",
    "\n",
    "plt.subplot(1,3,1)\n",
    "plt.scatter(pX[:, 0], pX[:, 1], alpha=0.5)\n",
    "plt.title(\"2 Component PCA\") \n",
    "plt.grid()\n",
    "plt.xlabel ('Component 1') \n",
    "plt.ylabel ('Component 2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1123856176048112\n"
     ]
    }
   ],
   "source": [
    "# Only retains 11.2% variance with 2 components\n",
    "print(np.sum(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 256, 256, 7)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_inv = pca.inverse_transform(pX)\n",
    "X_trans = np.reshape(pca_inv,(256, 256, 256, 7))\n",
    "X_trans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e2d3765ae23141ee9ab8b239170dd2a4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=127, description='z', max=255), Output()), _dom_classes=('widget-interac…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.display_slice(z)>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# side by side comparison of original images and reconstructed\n",
    "def display_slice(z):\n",
    "    \n",
    "    #original\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)\n",
    "        image = abs(MRI[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()  \n",
    "    plt.suptitle('Original', y=1, size=20)\n",
    "    \n",
    "    #reconstruct images using reduced dataset\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)        \n",
    "        image = abs(X_trans[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()\n",
    "    plt.suptitle('Reconstructed', y=1, size=20)\n",
    "    \n",
    "   \n",
    "interact(display_slice, z=(0, 255))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Testing 4 Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca4 = PCA(n_components=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "p4X = pca4.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape:  (256, 458752)\n",
      "Transformed shape:  (256, 4)\n"
     ]
    }
   ],
   "source": [
    "print(\"Original shape: \", X.shape)\n",
    "print(\"Transformed shape: \", p4X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Component 1</th>\n",
       "      <th>Component 2</th>\n",
       "      <th>Component 3</th>\n",
       "      <th>Component 4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>154758.005766</td>\n",
       "      <td>24729.590757</td>\n",
       "      <td>21814.871013</td>\n",
       "      <td>117498.292427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>143228.383886</td>\n",
       "      <td>21897.259328</td>\n",
       "      <td>27444.184430</td>\n",
       "      <td>124085.104907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>139746.082477</td>\n",
       "      <td>27703.936887</td>\n",
       "      <td>29179.639459</td>\n",
       "      <td>118794.274531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>137775.000728</td>\n",
       "      <td>40776.507375</td>\n",
       "      <td>33584.678296</td>\n",
       "      <td>106216.528592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>131886.308687</td>\n",
       "      <td>50019.692289</td>\n",
       "      <td>36815.599880</td>\n",
       "      <td>98635.499833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>123492.339718</td>\n",
       "      <td>58279.145626</td>\n",
       "      <td>40005.357054</td>\n",
       "      <td>92053.082736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>113975.221413</td>\n",
       "      <td>64577.853542</td>\n",
       "      <td>40105.669187</td>\n",
       "      <td>84875.852820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>106195.225825</td>\n",
       "      <td>69145.985255</td>\n",
       "      <td>35857.400116</td>\n",
       "      <td>78366.437310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>101582.325093</td>\n",
       "      <td>72474.153423</td>\n",
       "      <td>33555.560537</td>\n",
       "      <td>75155.249752</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>100438.910345</td>\n",
       "      <td>76738.472742</td>\n",
       "      <td>33259.142039</td>\n",
       "      <td>74077.220891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>97921.457824</td>\n",
       "      <td>75996.908920</td>\n",
       "      <td>30376.685888</td>\n",
       "      <td>76395.280279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>96049.041829</td>\n",
       "      <td>75690.808539</td>\n",
       "      <td>29104.357442</td>\n",
       "      <td>74174.465341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>93307.879835</td>\n",
       "      <td>78334.366904</td>\n",
       "      <td>28400.654183</td>\n",
       "      <td>74557.554046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>88763.036904</td>\n",
       "      <td>81342.171909</td>\n",
       "      <td>27304.382592</td>\n",
       "      <td>74964.960325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>84656.027301</td>\n",
       "      <td>83464.080817</td>\n",
       "      <td>26276.010700</td>\n",
       "      <td>75399.279667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>81087.678203</td>\n",
       "      <td>84167.723992</td>\n",
       "      <td>24882.693214</td>\n",
       "      <td>74767.449236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>76703.727796</td>\n",
       "      <td>84325.163588</td>\n",
       "      <td>23707.498391</td>\n",
       "      <td>73410.385567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>74723.947626</td>\n",
       "      <td>87004.404920</td>\n",
       "      <td>22382.301200</td>\n",
       "      <td>75090.259839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>69620.610157</td>\n",
       "      <td>88671.554485</td>\n",
       "      <td>19481.736400</td>\n",
       "      <td>73991.905196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>65478.757005</td>\n",
       "      <td>87929.004027</td>\n",
       "      <td>18113.971280</td>\n",
       "      <td>75508.548441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>61533.716796</td>\n",
       "      <td>88268.132697</td>\n",
       "      <td>14954.648892</td>\n",
       "      <td>72813.043425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>56827.095351</td>\n",
       "      <td>90761.188545</td>\n",
       "      <td>13684.691494</td>\n",
       "      <td>70963.816291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>53304.159442</td>\n",
       "      <td>92790.871799</td>\n",
       "      <td>9962.612632</td>\n",
       "      <td>72269.756009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>50731.814741</td>\n",
       "      <td>92237.371889</td>\n",
       "      <td>6745.252256</td>\n",
       "      <td>74352.710352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>47487.680881</td>\n",
       "      <td>94771.861896</td>\n",
       "      <td>3938.243838</td>\n",
       "      <td>75505.381437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>45585.621267</td>\n",
       "      <td>95741.185019</td>\n",
       "      <td>4866.607524</td>\n",
       "      <td>74873.755282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>43106.967662</td>\n",
       "      <td>96691.075002</td>\n",
       "      <td>5655.405110</td>\n",
       "      <td>72638.719611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>39438.775330</td>\n",
       "      <td>100530.715843</td>\n",
       "      <td>2511.323204</td>\n",
       "      <td>70043.832514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>34901.545948</td>\n",
       "      <td>99930.684305</td>\n",
       "      <td>1909.697420</td>\n",
       "      <td>67841.154247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30699.767301</td>\n",
       "      <td>99227.139585</td>\n",
       "      <td>1250.698132</td>\n",
       "      <td>66754.238916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>226</th>\n",
       "      <td>195521.720048</td>\n",
       "      <td>-78495.062570</td>\n",
       "      <td>-39417.920589</td>\n",
       "      <td>-27460.375529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>193295.323882</td>\n",
       "      <td>-78516.467744</td>\n",
       "      <td>-39551.713609</td>\n",
       "      <td>-26233.441243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>228</th>\n",
       "      <td>194577.589862</td>\n",
       "      <td>-78683.105770</td>\n",
       "      <td>-39335.129606</td>\n",
       "      <td>-28550.894323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229</th>\n",
       "      <td>193859.444498</td>\n",
       "      <td>-83290.883741</td>\n",
       "      <td>-41638.989525</td>\n",
       "      <td>-28657.778614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>195220.468654</td>\n",
       "      <td>-83958.685220</td>\n",
       "      <td>-40261.445866</td>\n",
       "      <td>-28747.495015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>194230.178577</td>\n",
       "      <td>-84254.107012</td>\n",
       "      <td>-42132.799741</td>\n",
       "      <td>-26699.139374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>193849.469586</td>\n",
       "      <td>-79523.562149</td>\n",
       "      <td>-45567.703032</td>\n",
       "      <td>-25906.812295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>194824.938455</td>\n",
       "      <td>-83491.823880</td>\n",
       "      <td>-40834.745077</td>\n",
       "      <td>-24793.630706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>194546.076352</td>\n",
       "      <td>-86846.161567</td>\n",
       "      <td>-43103.152660</td>\n",
       "      <td>-25734.540646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>194775.669952</td>\n",
       "      <td>-87714.142334</td>\n",
       "      <td>-42596.385732</td>\n",
       "      <td>-22851.469335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>192586.340243</td>\n",
       "      <td>-82269.011357</td>\n",
       "      <td>-40976.883218</td>\n",
       "      <td>-20882.558036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>193136.779565</td>\n",
       "      <td>-80863.639119</td>\n",
       "      <td>-43877.474027</td>\n",
       "      <td>-21240.963706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>194036.910154</td>\n",
       "      <td>-85062.437842</td>\n",
       "      <td>-41875.207787</td>\n",
       "      <td>-24292.403988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>194307.108162</td>\n",
       "      <td>-83556.374337</td>\n",
       "      <td>-44838.338716</td>\n",
       "      <td>-19201.155109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>194618.540348</td>\n",
       "      <td>-81363.918598</td>\n",
       "      <td>-43286.639694</td>\n",
       "      <td>-16269.812128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>193803.709880</td>\n",
       "      <td>-82118.798234</td>\n",
       "      <td>-44770.344994</td>\n",
       "      <td>-16118.400079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>194656.946759</td>\n",
       "      <td>-79300.230690</td>\n",
       "      <td>-40797.369950</td>\n",
       "      <td>-12731.683921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>193606.158774</td>\n",
       "      <td>-77744.121333</td>\n",
       "      <td>-41268.649869</td>\n",
       "      <td>-14168.084635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>192418.746202</td>\n",
       "      <td>-74702.145713</td>\n",
       "      <td>-39889.408502</td>\n",
       "      <td>-10840.231324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>245</th>\n",
       "      <td>193065.355510</td>\n",
       "      <td>-76442.483645</td>\n",
       "      <td>-40238.985256</td>\n",
       "      <td>-10133.145196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>191671.575850</td>\n",
       "      <td>-76065.511517</td>\n",
       "      <td>-38391.413955</td>\n",
       "      <td>-5526.454235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>194201.760352</td>\n",
       "      <td>-74915.388205</td>\n",
       "      <td>-37032.322575</td>\n",
       "      <td>-4704.595751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>194595.958706</td>\n",
       "      <td>-74623.484039</td>\n",
       "      <td>-32385.904724</td>\n",
       "      <td>-3883.486028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>199911.360502</td>\n",
       "      <td>-78585.583121</td>\n",
       "      <td>-31577.555074</td>\n",
       "      <td>3454.839905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>250</th>\n",
       "      <td>202588.568490</td>\n",
       "      <td>-78080.095010</td>\n",
       "      <td>-30470.540328</td>\n",
       "      <td>17303.173556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>251</th>\n",
       "      <td>207873.127025</td>\n",
       "      <td>-81989.353310</td>\n",
       "      <td>-30130.583400</td>\n",
       "      <td>29391.305035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>209361.290924</td>\n",
       "      <td>-85889.137014</td>\n",
       "      <td>-32172.598839</td>\n",
       "      <td>42313.175496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253</th>\n",
       "      <td>212489.024544</td>\n",
       "      <td>-87790.028270</td>\n",
       "      <td>-30690.501091</td>\n",
       "      <td>62231.605919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>213215.378431</td>\n",
       "      <td>-81374.799878</td>\n",
       "      <td>-28223.577202</td>\n",
       "      <td>72455.963399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>139812.092937</td>\n",
       "      <td>67819.148637</td>\n",
       "      <td>-36383.619509</td>\n",
       "      <td>132933.720045</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>256 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Component 1    Component 2   Component 3    Component 4\n",
       "0    154758.005766   24729.590757  21814.871013  117498.292427\n",
       "1    143228.383886   21897.259328  27444.184430  124085.104907\n",
       "2    139746.082477   27703.936887  29179.639459  118794.274531\n",
       "3    137775.000728   40776.507375  33584.678296  106216.528592\n",
       "4    131886.308687   50019.692289  36815.599880   98635.499833\n",
       "5    123492.339718   58279.145626  40005.357054   92053.082736\n",
       "6    113975.221413   64577.853542  40105.669187   84875.852820\n",
       "7    106195.225825   69145.985255  35857.400116   78366.437310\n",
       "8    101582.325093   72474.153423  33555.560537   75155.249752\n",
       "9    100438.910345   76738.472742  33259.142039   74077.220891\n",
       "10    97921.457824   75996.908920  30376.685888   76395.280279\n",
       "11    96049.041829   75690.808539  29104.357442   74174.465341\n",
       "12    93307.879835   78334.366904  28400.654183   74557.554046\n",
       "13    88763.036904   81342.171909  27304.382592   74964.960325\n",
       "14    84656.027301   83464.080817  26276.010700   75399.279667\n",
       "15    81087.678203   84167.723992  24882.693214   74767.449236\n",
       "16    76703.727796   84325.163588  23707.498391   73410.385567\n",
       "17    74723.947626   87004.404920  22382.301200   75090.259839\n",
       "18    69620.610157   88671.554485  19481.736400   73991.905196\n",
       "19    65478.757005   87929.004027  18113.971280   75508.548441\n",
       "20    61533.716796   88268.132697  14954.648892   72813.043425\n",
       "21    56827.095351   90761.188545  13684.691494   70963.816291\n",
       "22    53304.159442   92790.871799   9962.612632   72269.756009\n",
       "23    50731.814741   92237.371889   6745.252256   74352.710352\n",
       "24    47487.680881   94771.861896   3938.243838   75505.381437\n",
       "25    45585.621267   95741.185019   4866.607524   74873.755282\n",
       "26    43106.967662   96691.075002   5655.405110   72638.719611\n",
       "27    39438.775330  100530.715843   2511.323204   70043.832514\n",
       "28    34901.545948   99930.684305   1909.697420   67841.154247\n",
       "29    30699.767301   99227.139585   1250.698132   66754.238916\n",
       "..             ...            ...           ...            ...\n",
       "226  195521.720048  -78495.062570 -39417.920589  -27460.375529\n",
       "227  193295.323882  -78516.467744 -39551.713609  -26233.441243\n",
       "228  194577.589862  -78683.105770 -39335.129606  -28550.894323\n",
       "229  193859.444498  -83290.883741 -41638.989525  -28657.778614\n",
       "230  195220.468654  -83958.685220 -40261.445866  -28747.495015\n",
       "231  194230.178577  -84254.107012 -42132.799741  -26699.139374\n",
       "232  193849.469586  -79523.562149 -45567.703032  -25906.812295\n",
       "233  194824.938455  -83491.823880 -40834.745077  -24793.630706\n",
       "234  194546.076352  -86846.161567 -43103.152660  -25734.540646\n",
       "235  194775.669952  -87714.142334 -42596.385732  -22851.469335\n",
       "236  192586.340243  -82269.011357 -40976.883218  -20882.558036\n",
       "237  193136.779565  -80863.639119 -43877.474027  -21240.963706\n",
       "238  194036.910154  -85062.437842 -41875.207787  -24292.403988\n",
       "239  194307.108162  -83556.374337 -44838.338716  -19201.155109\n",
       "240  194618.540348  -81363.918598 -43286.639694  -16269.812128\n",
       "241  193803.709880  -82118.798234 -44770.344994  -16118.400079\n",
       "242  194656.946759  -79300.230690 -40797.369950  -12731.683921\n",
       "243  193606.158774  -77744.121333 -41268.649869  -14168.084635\n",
       "244  192418.746202  -74702.145713 -39889.408502  -10840.231324\n",
       "245  193065.355510  -76442.483645 -40238.985256  -10133.145196\n",
       "246  191671.575850  -76065.511517 -38391.413955   -5526.454235\n",
       "247  194201.760352  -74915.388205 -37032.322575   -4704.595751\n",
       "248  194595.958706  -74623.484039 -32385.904724   -3883.486028\n",
       "249  199911.360502  -78585.583121 -31577.555074    3454.839905\n",
       "250  202588.568490  -78080.095010 -30470.540328   17303.173556\n",
       "251  207873.127025  -81989.353310 -30130.583400   29391.305035\n",
       "252  209361.290924  -85889.137014 -32172.598839   42313.175496\n",
       "253  212489.024544  -87790.028270 -30690.501091   62231.605919\n",
       "254  213215.378431  -81374.799878 -28223.577202   72455.963399\n",
       "255  139812.092937   67819.148637 -36383.619509  132933.720045\n",
       "\n",
       "[256 rows x 4 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pca4 = pd.DataFrame(p4X, columns = ['Component 1', 'Component 2', 'Component 3', 'Component 4'])\n",
    "df_pca4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1494432180250055\n"
     ]
    }
   ],
   "source": [
    "# Only retains 14.9% variance with 4 components\n",
    "print(np.sum(pca4.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 256, 256, 7)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca4_inv = pca4.inverse_transform(p4X)\n",
    "X4_trans = np.reshape(pca4_inv,(256, 256, 256, 7))\n",
    "X4_trans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46cabeccb21d4c24913d9da74b62aab0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=127, description='z', max=255), Output()), _dom_classes=('widget-interac…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.display_slice(z)>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# side by side comparison of original images and reconstructed\n",
    "def display_slice(z):\n",
    "    \n",
    "    #original\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)\n",
    "        image = abs(MRI[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()  \n",
    "    plt.suptitle('Original', y=1, size=20)\n",
    "    \n",
    "    #reconstruct images using reduced dataset\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)        \n",
    "        image = abs(X4_trans[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()    \n",
    "    plt.suptitle('Reconstructed', y=1, size=20)\n",
    "    \n",
    "   \n",
    "interact(display_slice, z=(0, 255))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many components are needed to retain 65% variance?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_n = PCA(0.65)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "pnX = pca_n.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape:  (256, 458752)\n",
      "Transformed shape:  (256, 91)\n"
     ]
    }
   ],
   "source": [
    "print(\"Original shape: \", X.shape)\n",
    "print(\"Transformed shape: \", pnX.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6502583462017033\n"
     ]
    }
   ],
   "source": [
    "print(np.sum(pca_n.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 256, 256, 7)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca91_inv = pca_n.inverse_transform(pnX)\n",
    "X91_trans = np.reshape(pca91_inv,(256, 256, 256, 7))\n",
    "X91_trans.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6c59ad44f7a74416b44966f4cf3f2de4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=127, description='z', max=255), Output()), _dom_classes=('widget-interac…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<function __main__.display_slice(z)>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# side by side comparison of original images and reconstructed\n",
    "def display_slice(z):\n",
    "    \n",
    "    #original\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)\n",
    "        image = abs(MRI[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()  \n",
    "    plt.suptitle('Original', y=1, size=20)\n",
    "    \n",
    "    #reconstruct images using reduced dataset\n",
    "    plt.figure(figsize=(16,12))\n",
    "    for i in range(7):\n",
    "        plt.subplot(3,4,i+1)        \n",
    "        image = abs(X91_trans[:,:,z,i])\n",
    "        plt.imshow(image,cmap=\"gray\")\n",
    "        plt.axis('off')\n",
    "    plt.tight_layout()  \n",
    "    plt.suptitle('Reconstructed', y=1, size=20)\n",
    "    \n",
    "   \n",
    "interact(display_slice, z=(0, 255))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca_vis = PCA().fit(X)\n",
    "plt.plot(np.cumsum(pca_vis.explained_variance_ratio_))\n",
    "plt.xlabel('number of components')\n",
    "plt.ylabel('cumulative explained variance');"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
